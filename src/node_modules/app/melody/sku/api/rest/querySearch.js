import createDebugger       from 'evoke-me/debug/api/create'

import config               from '../config'
import errorMap             from '../../../manager/api/errorMap'


const who = [config.namespace, config.entity, `api`, `rest`, `querySearch`]
const debug = createDebugger(who.join(`:`))

const pickMap = {
  name: (value) => (typeof value === 'string') || (value instanceof String),
  minPrice: (value) => !isNaN(value) && value >= 0,
  maxPrice: (value) => !isNaN(value) && value >= 0,
  brandCode: (value) => !isNaN(value) && value,
  categoryCodeList: (value) => Array.isArray(value) && value.length,
  designerIdList: (value) => Array.isArray(value) && value.length,
  characteristicList: (value) => Array.isArray(value) && value.length,
  spaceCodeList: (value) => Array.isArray(value) && value.length,
  hasStock: (value) => !isNaN(value) && value >= 0,
}

const defaultMap = {
  // minPrice: 0,
  // maxPrice:  20000,
  // hasStock: 0,
}

export default async (payload, options = {}) => {
  try {
    debug(payload, options)
    const {
      host = `https://api.melodycity.cn/v1`
    } = options

    const bodyMap = Object.keys(pickMap).reduce((acc, name) => {
      if (payload.hasOwnProperty(name)) {
        const value = payload[name]
        if (pickMap[name](value)) {
          acc[name] = value
        } else {
          if (defaultMap.hasOwnProperty(name)) {
            acc[name] = defaultMap[name]
          }
        }
      }
      return acc
    }, {})

    const response = await fetch(`${host}/sku/search`, {
      method: `POST`,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(bodyMap)
    })
    const json = await response.json()

    const { code, message } = json

    if (code === 0) {
      return {
        result: json.data.skuList,
        errors: [],
      }
    }

    return {
      result: null,
      errors: [{
        type: config.namespace,
        code: errorMap.ERROR_CODE_NOT_ZERO,
        message,
      }],
    }
  } catch (err) {
    debug(`ERROR`, err)

    return {
      result: null,
      errors: [{
        type: config.namespace,
        code: errorMap.UNKNOWN,
        message: `Unknown error`,
      }]
    }
  }
}
