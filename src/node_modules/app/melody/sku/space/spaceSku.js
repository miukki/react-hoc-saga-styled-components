import spaceDefaults        from 'evoke-me/space/api/spaceDefaults'

import config               from '../api/config'
import orderTypeMap         from '../api/orderTypeMap'
import queryHome            from '../api/rest/queryHome'
import querySearch          from '../api/rest/querySearch'


export default [
  config.namespace,
  config.entity,
  [],
  () => ({
    ...spaceDefaults.state,
  }),
  {
    ...spaceDefaults.updaters,

    queryHome: (setState, getState, { create, orderClear }) => function* () {
      try {
        yield setState({ isLoading: true })

        const { result, errors } = yield queryHome()

        if (errors.length) {
          return yield setState({ errors, isLoading: false })
        }

        yield orderClear(orderTypeMap.HOME)
        for (let doc of result) {
          yield create(doc, { orderName: orderTypeMap.HOME })
        }

        yield setState({ isLoading: false })
      } catch (err) {
        yield setState({ isLoading: false })

        console.error(err)
      }
    },

    querySearch: (setState, getState, { create, orderClear }) => function* (payload = {}, options = {}) {
      try {
        const {
          orderName = orderTypeMap.SEARCH,
        } = options
        const {
          name,
          minPrice,
          maxPrice,
          brandCode,
          categoryCodeList,
          designerIdList,
          characteristicList,
          spaceCodeList,
          hasStock,
        } = payload

        yield setState({ isLoading: true })

        const { result, errors } = yield querySearch({
          name,
          minPrice,
          maxPrice,
          brandCode,
          categoryCodeList,
          designerIdList,
          characteristicList,
          spaceCodeList,
          hasStock,
        })

        if (errors.length) {
          return yield setState({ errors, isLoading: false })
        }

        yield orderClear(orderName)
        for (let doc of result) {
          yield create(doc, { orderName })
        }

        yield setState({ isLoading: false })
      } catch (err) {
        yield setState({ isLoading: false })

        console.error(err)
      }
    },
  }
]
