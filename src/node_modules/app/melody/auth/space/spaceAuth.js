import uuid                 from 'uuid/v4'


import spacePersist         from 'box/persist/manager/space/spacePersist'
import createDebugger       from 'evoke-me/debug/api/create'

import config               from '../api/config'

import restRegisterGetCaptcha from '../api/rest/registerGetCaptcha'
import restRegisterGetMessage from '../api/rest/registerGetMessage'
import restRegisterPassword from '../api/rest/registerPassword'
import restLogin            from '../api/rest/login'

import errorMap             from '../../manager/api/errorMap'


const who = [config.namespace, config.entity, `space`, `spaceAuth`]
const debug = createDebugger(who.join(`:`))

export default [
  config.namespace,
  config.entity,
  [
    spacePersist,
  ],
  () => ({
    machineNo: null,
    persistMachineNo: `${config.namespace}.${config.entity}.machineNo`,
    persistSessionKey: `${config.namespace}.${config.entity}.sessionKey`,
    pictureCode: null,
    sessionKey: null,

    messageCodeTimestamp: null,
  }),
  {
    login: (getState, setState, methods, { fromPersist }) => function* ({
      mobileNo,
      password,
    }) {
      try {
        const { persistSessionKey } = yield getState()

        debug(`login`)

        yield setState({ isLoading: true })

        const { result, errors } = yield restLogin({
          mobileNo,
          password,
        })

        if (errors.length) {
          yield setState({ errors, isLoading: false })
          return null
        }

        const { sessionKey } = result

        yield fromPersist.set(persistSessionKey, sessionKey)

        yield setState({
          isLoading: false,
          sessionKey,
        })

        return sessionKey
      } catch (err) {
        yield setState({
          errors: [{ type: config.namespace, code: errorMap.UNKNOWN, props: {},
            message: `login error`,
          }],
          isLoading: false,
        })

        console.error(err)
      }
    },

    getSessionKey: (getState, setState, methods, { fromPersist }) => function* () {
      try {
        const {
          persistSessionKey,
        } = yield getState()

        const sessionKeySaved = yield fromPersist.get(persistSessionKey)

        if (sessionKeySaved) {
          debug(`getSessionKey`, `sessionKey - RESTORE`, sessionKeySaved)
          return yield setState({ sessionKey: sessionKeySaved })
        }

      } catch (err) {
        console.error(`ERROR`, err)
      }
    },

    start: (getState, setState, methods, { fromPersist }) => function* () {
      try {
        const {
          persistMachineNo,
          persistSessionKey,
        } = yield getState()

        const machineNoSaved = yield fromPersist.get(persistMachineNo)
        const sessionKeySaved = yield fromPersist.get(persistSessionKey)

        if (sessionKeySaved) {
          debug(`start`, `sessionKey - RESTORE`, sessionKeySaved)
          yield setState({ sessionKey: sessionKeySaved })
        }

        if (machineNoSaved) {
          debug(`start`, `machineNo - RESTORE`, machineNoSaved)
          yield setState({ machineNo: machineNoSaved })
          return machineNoSaved
        }

        const machineNo = uuid()
        debug(`start`, `machineNo - CREATE`, machineNoSaved)
        yield setState({ machineNo })
        yield fromPersist.set(persistMachineNo, machineNo)

        return machineNo
      } catch (err) {
        console.error(`ERROR`, err)
      }
    },

    getMachineNo: (getState, setState, { start }) => function* () {
      try {
        debug(`getMachineNo`)

        const { machineNo } = yield getState()

        if (machineNo) {
          return machineNo
        } else {
          const machineNoFromStart = yield start()

          return machineNoFromStart
        }
      } catch (err) {
        console.error(`ERROR`, err)
      }
    },

    registerGetCaptcha: (getState, setState, { getMachineNo }) => function* () {
      try {
        debug(`registerGetCaptcha`)
        const machineNo = yield getMachineNo()

        if (!machineNo) {
          throw new Error(`Cannot restore or generate machineNo`)
        }

        yield setState({ isLoading: true })

        const { result, errors } = yield restRegisterGetCaptcha({ machineNo })

        if (errors.length) {
          return yield setState({ errors, isLoading: false })
        }

        yield setState({
          isLoading: false,
          pictureCode: result,
        })

        return result

      } catch (err) {

        yield setState({
          errors: [{ type: config.namespace, code: errorMap.UNKNOWN, props: {},
            message: `registerGetCaptcha error`,
          }],
          isLoading: false,
        })

        console.error(err)
      }
    },

    registerGetMessage: (getState, setState) => function* ({ mobileNo, pictureCode }) {
      try {
        debug(`registerGetMessage`)

        yield setState({ isLoading: true })

        const { result, errors } = yield restRegisterGetMessage({ mobileNo, pictureCode })

        if (errors.length) {
          yield setState({ errors, isLoading: false })
          return null
        }

        if (!result) {
          yield setState({
            errors: [{ type: config.namespace, code: errorMap.UNKNOWN, props: {},
              message: `registerGetMessage error`,
            }],
            isLoading: false,
          })
          return null
        }

        const messageCodeTimestamp = Date.now()
        
        console.log(`messageCodeTimestamp`, messageCodeTimestamp)

        yield setState({
          isLoading: false,
          messageCodeTimestamp,
        })

        return messageCodeTimestamp

      } catch (err) {
       
        yield setState({
          errors: [{ type: config.namespace, code: errorMap.UNKNOWN, props: {},
            message: `registerGetMessage error`,
          }],
          isLoading: false,
        })

        console.error(err)
      }
    },

    registerPassword: (getState, setState, methods, { fromPersist }) => function* ({
      mobileCode,
      mobileNo,
      password,
      readAndAgree,
    }) {
      try {

        const { persistSessionKey } = yield getState()

        debug(`registerPassword`)

        yield setState({ isLoading: true })
        const { result, errors } = yield restRegisterPassword({
          mobileCode,
          mobileNo,
          password,
          readAndAgree,
        })

        if (errors.length) {
          yield setState({ errors, isLoading: false })
          return null
        }

        const { sessionKey } = result

        yield fromPersist.set(persistSessionKey, sessionKey)

        yield setState({
          isLoading: false,
          sessionKey,
        })

        return sessionKey

      } catch (err) {
        yield setState({
          errors: [{ type: config.namespace, code: errorMap.UNKNOWN, props: {},
            message: `registerPassword error`,
          }],
          isLoading: false,
        })

        console.error(err)
      }
    },

    registerEmulator: (getState, setState, {
      start,
      registerGetCaptcha,
      registerGetMessage,
      registerPassword,
    }) => function* () {
      const mobileNo = `15800019853`

      const machineNo = yield start()

      console.log(`machineNo`, machineNo)

      const pictureCode = yield registerGetCaptcha()

      console.log(`pictureCode`, pictureCode)

      const messageCodeTimestamp = yield registerGetMessage({
        mobileNo,
        pictureCode: `8888`,
      })

      console.log(`messageCodeTimestamp`, messageCodeTimestamp)

      const sessionKey = yield registerPassword({
        mobileCode: `8888`,
        mobileNo,
        password: `123456`,
        readAndAgree: 1,
      })

      console.log(`sessionKey`, sessionKey)
    },

    loginEmulator: (getState, setState, {
      start,
      login,
    }) => function* () {
      const mobileNo = `15800911536`

      const sessionKey = yield login({
        mobileNo,
        password: `123456`,
      })

      console.log(`sessionKey`, sessionKey)
    },
  }
]
